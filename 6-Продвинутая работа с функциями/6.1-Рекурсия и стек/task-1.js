/*
Напишите функцию sumTo(n), которая вычисляет сумму чисел 1 + 2 + ... + n.

Например:

sumTo(1) = 1
sumTo(2) = 2 + 1 = 3
sumTo(3) = 3 + 2 + 1 = 6
sumTo(4) = 4 + 3 + 2 + 1 = 10
...
sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
Сделайте три варианта решения:

1) С использованием цикла.
2) Через рекурсию, т.к. sumTo(n) = n + sumTo(n-1) for n > 1.
3) С использованием формулы арифметической прогрессии.
*/

// РЕШЕНИЕ
// 1) С использование цикла
function sumToCycle(n) {
  let sum = 0;
  for (let i = 1; i <= n; i++) {
    sum += i;
  }
  return sum;
}
// 2) С рекурсией
function sumToRec(n) {
  if (n === 1) {
    return n;
  } else {
    return n + sumToRec(n - 1);
  }
}
// 3) По формуле
function sumToArithmetic(n) {
  return (n * (n + 1)) / 2;
}

console.log(sumToCycle(7429)); // 5050
console.log(sumToRec(7429)); // 5050
console.log(sumToArithmetic(7429)); // 5050

// Быстрее всего вычисление по формуле, оно и в жизни быстрее будет
// Далее по скорости идет массив, за ним рекурсия
// А все из-за стека вызовов, в какой-то момент рекурсия просто его переполнит, да
// и механизм работы другой, который замедляет исполнение рекурсивных ф-ий
